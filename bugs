See the Assessment Guide for information on how to interpret this report.

ASSESSMENT SUMMARY

Compilation:  PASSED
API:          PASSED

Findbugs:     FAILED (2 warnings)
PMD:          PASSED
Checkstyle:   FAILED (0 errors, 11 warnings)

Correctness:  16/35 tests passed
Memory:       4/4 tests passed
Timing:       15/16 tests passed

Aggregate score: 66.18%
[Compilation: 5%, API: 5%, Findbugs: 0%, PMD: 0%, Checkstyle: 0%, Correctness: 60%, Memory: 10%, Timing: 20%]

ASSESSMENT DETAILS

The following files were submitted:
----------------------------------
1.3K Oct 29 05:58 Outcast.java
3.8K Oct 29 05:58 SAP.java
4.7K Oct 29 05:58 WordNet.java


********************************************************************************
*  COMPILING
********************************************************************************


% javac SAP.java
*-----------------------------------------------------------

% javac WordNet.java
*-----------------------------------------------------------

% javac Outcast.java
*-----------------------------------------------------------


================================================================


Checking the APIs of your programs.
*-----------------------------------------------------------
SAP:

WordNet:

Outcast:

================================================================


********************************************************************************
*  CHECKING STYLE AND COMMON BUG PATTERNS
********************************************************************************


% findbugs *.class
*-----------------------------------------------------------
M P NAB_NEEDLESS_BOXING_VALUEOF NAB: Method WordNet.readSynsets(String) converts String to boxed primitive using excessive boxing  At WordNet.java:[line 71]
M P NAB_NEEDLESS_BOXING_VALUEOF NAB: Method WordNet.readSynsets(String) converts String to boxed primitive using excessive boxing  At WordNet.java:[line 74]
Warnings generated: 2


================================================================


% pmd .
*-----------------------------------------------------------
Outcast.java:8: The private instance (or static) variable '_wordnet' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
SAP.java:12: The private instance (or static) variable '_graph' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
WordNet.java:15: The private instance (or static) variable '_dict' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
WordNet.java:16: The private instance (or static) variable '_reverseDict' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
WordNet.java:17: The private instance (or static) variable '_sap' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
WordNet.java:62: Avoid using assignment statements in expressions; this can make code harder to read. [AssignmentInOperand]
WordNet.java:84: Avoid using assignment statements in expressions; this can make code harder to read. [AssignmentInOperand]
PMD ends with 7 warnings.


================================================================


% checkstyle *.java
*-----------------------------------------------------------
[WARN] Outcast.java:8:21: The instance variable '_wordnet' must start with a lowercase letter and use camelCase. [MemberName]
[WARN] Outcast.java:35:5: File contains tab characters (this is the first occurrence). Configure your editor to replace tabs with spaces. [FileTabCharacter]
[WARN] SAP.java:12:21: The instance variable '_graph' must start with a lowercase letter and use camelCase. [MemberName]
[WARN] WordNet.java:15:40: The instance variable '_dict' must start with a lowercase letter and use camelCase. [MemberName]
[WARN] WordNet.java:16:34: The instance variable '_reverseDict' must start with a lowercase letter and use camelCase. [MemberName]
[WARN] WordNet.java:17:17: The instance variable '_sap' must start with a lowercase letter and use camelCase. [MemberName]
[WARN] WordNet.java:18:17: The instance variable '_v' must start with a lowercase letter and use camelCase. [MemberName]
[WARN] WordNet.java:63:25: To specify an array type, put the square brackets before the variable name, e.g., 'String[] args' instead of 'String args[]'. [ArrayTypeStyle]
[WARN] WordNet.java:64:25: To specify an array type, put the square brackets before the variable name, e.g., 'String[] args' instead of 'String args[]'. [ArrayTypeStyle]
[WARN] WordNet.java:85:25: To specify an array type, put the square brackets before the variable name, e.g., 'String[] args' instead of 'String args[]'. [ArrayTypeStyle]
[WARN] WordNet.java:116:24: The local variable 'S' must start with a lowercase letter and use camelCase. [LocalVariableName]
Checkstyle ends with 0 errors and 11 warnings.


================================================================


********************************************************************************
*  TESTING CORRECTNESS
********************************************************************************

Testing correctness of SAP
*-----------------------------------------------------------
Running 19 total tests.

Test 1: test length() and ancestor() on fixed digraphs
  * digraph1.txt
    - failed on trial 1 of 169
    - v = 3, w = 3
    - student   length() = 2
    - reference length() = 0

  * digraph2.txt
    - failed on trial 5 of 36
    - v = 4, w = 2
    - student   length() = 4
    - reference length() = 2

  * digraph3.txt
    - failed on trial 1 of 225
    - v = 4, w = 4
    - student   length() = 2
    - reference length() = 0

  * digraph4.txt
    - failed on trial 1 of 100
    - v = 7, w = 7
    - student   length() = 2
    - reference length() = 0

  * digraph5.txt
    - failed on trial 4 of 484
    - v = 9, w = 20
    - student   length() = 5
    - reference length() = 3

  * digraph6.txt
    - failed on trial 1 of 64
    - v = 4, w = 5
    - student   length   = -1
    - reference length   = 1
    - student   ancestor = -1
    - reference ancestor = 4

  * digraph9.txt
    - failed on trial 1 of 81
    - v = 3, w = 7
    - student   length() = 4
    - reference length() = 2

==> FAILED

Test 2: check length() and ancestor() on WordNet digraph
  * 100 random vertex pairs in digraph-wordnet.txt
    - failed on trial 8 of 100
    - v = 65573, w = 61567
    - student   length() = 13
    - reference length() = 12

==> FAILED

Test 3: check length() and ancestor() on directed paths
  * 5
    - failed on trial 2 of 25
    - v = 0, w = 1
    - student   length   = -1
    - reference length   = 2
    - student   ancestor = -1
    - reference ancestor = 0

  * 10
    - failed on trial 1 of 100
    - v = 6, w = 8
    - student   length   = -1
    - reference length   = 2
    - student   ancestor = -1
    - reference ancestor = 6

  * 20
    - failed on trial 2 of 400
    - v = 0, w = 10
    - student   length() = 16
    - reference length() = 14

  * 50
    - failed on trial 1 of 2500
    - v = 48, w = 26
    - student   length() = 35
    - reference length() = 33

  * 100
    - failed on trial 2 of 10000
    - v = 84, w = 90
    - student   length() = 24
    - reference length() = 22

==> FAILED

Test 4: check length() and ancestor() on directed cycles
  * 5
    - failed on trial 2 of 25
    - v = 1, w = 0
    - student   length() = 5
    - reference length() = 2

  * 10
    - failed on trial 1 of 100
    - v = 8, w = 6
    - student   length() = 9
    - reference length() = 3

  * 20
    - failed on trial 1 of 400
    - v = 19, w = 15
    - student   length() = 11
    - reference length() = 9

  * 50
    - failed on trial 2 of 2500
    - v = 2, w = 27
    - student   length() = 39
    - reference length() = 13

  * 100
    - failed on trial 1 of 10000
    - v = 7, w = 4
    - student   length() = 10
    - reference length() = 8

==> FAILED

Test 5: check length() and ancestor() on complete graphs
  * 5
    - failed on trial 1 of 25
    - v = 1, w = 2
    - student   length() = 2
    - reference length() = 1

  * 10
    - failed on trial 1 of 100
    - v = 4, w = 9
    - student   length() = 2
    - reference length() = 1

  * 20
    - failed on trial 1 of 400
    - v = 10, w = 14
    - student   length() = 2
    - reference length() = 1

  * 50
    - failed on trial 1 of 2500
    - v = 20, w = 11
    - student   length() = 2
    - reference length() = 1

==> FAILED

Test 6: check length() and ancestor() on tournament digraphs
  * 5
    - failed on trial 1 of 25
    - v = 4, w = 2
    - student   length() = 2
    - reference length() = 1

  * 10
    - failed on trial 1 of 100
    - v = 3, w = 5
    - student   length() = 2
    - reference length() = 1

  * 20
    - failed on trial 1 of 400
    - v = 17, w = 15
    - student   length() = 3
    - reference length() = 1

  * 50
    - failed on trial 1 of 2500
    - v = 31, w = 43
    - student   length() = 2
    - reference length() = 1

==> FAILED

Test 7: check length() and ancestor() on complete binary trees
  * 5
    - failed on trial 2 of 25
    - v = 1, w = 1
    - student   length() = 2
    - reference length() = 0

  * 10
    - failed on trial 3 of 100
    - v = 5, w = 5
    - student   length() = 2
    - reference length() = 0

  * 20
    - failed on trial 1 of 400
    - v = 2, w = 12
    - student   length() = 4
    - reference length() = 2

  * 50
    - failed on trial 5 of 2500
    - v = 31, w = 41
    - student   length() = 3
    - reference length() = 1

  * 100
    - failed on trial 28 of 10000
    - v = 34, w = 55
    - student   length() = 4
    - reference length() = 2

==> FAILED

Test 8: check length() and ancestor() on random DAGs
  * 5 vertices, 8 edges
    - failed on trial 1 of 25
    - v = 4, w = 0
    - student   length   = -1
    - reference length   = 1
    - student   ancestor = -1
    - reference ancestor = 4

    - failed on trial 1 of 100

  * 10 vertices, 40 edges
    - failed on trial 1 of 100
    - v = 1, w = 1
    - student   length() = 2
    - reference length() = 0

    - failed on trial 1 of 100

  * 20 vertices, 100 edges
    - failed on trial 1 of 400
    - v = 17, w = 17
    - student   length() = 2
    - reference length() = 0

    - failed on trial 1 of 100

==> FAILED

Test 9: check length() and ancestor() on random rooted-in DAGs
  * 5 vertices, 8 edges
    - failed on trial 2 of 25
    - v = 4, w = 1
    - student   length() = 2
    - reference length() = 1

    - failed on trial 1 of 100

  * 10 vertices, 40 edges
    - failed on trial 1 of 100
    - v = 4, w = 4
    - student   length() = 2
    - reference length() = 0

    - failed on trial 1 of 100

  * 20 vertices, 100 edges
    - failed on trial 1 of 400
    - v = 7, w = 4
    - student   length() = 3
    - reference length() = 2

    - failed on trial 1 of 100

==> FAILED

Test 10: check length() and ancestor() on random rooted-out DAGs
  * 5 vertices, 8 edges
    - failed on trial 2 of 25
    - v = 3, w = 2
    - student   length() = 2
    - reference length() = 1

    - failed on trial 1 of 100

  * 10 vertices, 40 edges
    - failed on trial 2 of 100
    - v = 2, w = 0
    - student   length() = 2
    - reference length() = 1

    - failed on trial 1 of 100

  * 20 vertices, 100 edges
    - failed on trial 1 of 400
    - v = 1, w = 8
    - student   length() = 3
    - reference length() = 1

    - failed on trial 1 of 100

==> FAILED

Test 11: check length() and ancestor() on random rooted-in trees
  * 5 vertices
    - failed on trial 6 of 25
    - v = 3, w = 2
    - student   length   = -1
    - reference length   = 1
    - student   ancestor = -1
    - reference ancestor = 3

    - failed on trial 1 of 100

  * 10 vertices
    - failed on trial 3 of 100
    - v = 9, w = 5
    - student   length   = -1
    - reference length   = 2
    - student   ancestor = -1
    - reference ancestor = 9

    - failed on trial 1 of 100

  * 20 vertices
    - failed on trial 3 of 400
    - v = 4, w = 16
    - student   length   = -1
    - reference length   = 1
    - student   ancestor = -1
    - reference ancestor = 4

    - failed on trial 1 of 100

==> FAILED

Test 12: check length() and ancestor() on random rooted-out trees
  * 5 vertices
    - failed on trial 3 of 25
    - v = 4, w = 4
    - student   length   = -1
    - reference length   = 0
    - student   ancestor = -1
    - reference ancestor = 4

    - failed on trial 1 of 100

  * 10 vertices
    - failed on trial 4 of 100
    - v = 8, w = 7
    - student   length   = -1
    - reference length   = 2
    - student   ancestor = -1
    - reference ancestor = 8

    - failed on trial 1 of 100

  * 20 vertices
    - failed on trial 6 of 400
    - v = 17, w = 12
    - student   length() = 6
    - reference length() = 4

    - failed on trial 1 of 100

==> FAILED

Test 13: check length() and ancestor() on random simple digraphs
  * 5 vertices, 8 edges
    - failed on trial 1 of 25
    - v = 4, w = 2
    - student   length() = 2
    - reference length() = 1

    - failed on trial 1 of 100

  * 10 vertices, 40 edges
    - failed on trial 1 of 100
    - v = 4, w = 4
    - student   length() = 2
    - reference length() = 0

    - failed on trial 1 of 100

  * 20 vertices, 100 edges
    - failed on trial 1 of 400
    - v = 3, w = 5
    - student   length() = 3
    - reference length() = 2

    - failed on trial 1 of 100

==> FAILED

Test 14: check whether two SAP objects can be created at the same time
  * digraph1.txt and digraph2.txt
    - v = 0, w = 0
    - (digraph1.txt) student   length() = -1
    - (digraph1.txt) reference length() = 0

  * digraph3.txt and digraph4.txt
    - v = 0, w = 0
    - (digraph3.txt) student   length() = 2
    - (digraph3.txt) reference length() = 0

  * digraph5.txt and digraph6.txt
    - v = 0, w = 0
    - (digraph5.txt) student   length() = 2
    - (digraph5.txt) reference length() = 0

  * digraph2.txt and digraph1.txt
    - v = 0, w = 0
    - (digraph2.txt) student   length() = -1
    - (digraph2.txt) reference length() = 0

==> FAILED

Test 15: check whether SAP is immutable
  * digraph1.txt
    - after adding edges (v, 0) to G
    - v = 1, w = 3
    - student length before = 3
    - student length after  = 2

  * digraph2.txt
    - after adding edges (v, 0) to G
    - v = 1, w = 2
    - student length before = 1
    - student length after  = 2

  * digraph3.txt
    - after adding edges (v, 0) to G
    - v = 0, w = 1
    - student length before = -1
    - student length after  = 3

  * digraph4.txt
    - after adding edges (v, 0) to G
    - v = 0, w = 2
    - student length before = 6
    - student length after  = 3

  * digraph5.txt
    - after adding edges (v, 0) to G
    - v = 0, w = 1
    - student length before = -1
    - student length after  = 3

  * digraph6.txt
    - after adding edges (v, 0) to G
    - v = 0, w = 2
    - student length before = 2
    - student length after  = 3

  * digraph-ambiguous-ancestor.txt
    - after adding edges (v, 0) to G
    - v = 0, w = 1
    - student length before = 1
    - student length after  = 3

==> FAILED

Test 16: test invalid arguments to length() and ancestor() in digraph1.txt
  * v = -1, w = 0
  * v = 0, w = -1
  * v = 13, w = 0
  * v = 0, w = 13
  * v = -1 1 6 7 9 , w = 2 8 10 11
  * v = 1 6 7 9 , w = -1 2 8 10 11
  * v = 13 1 6 7 9 , w = 2 8 10 11
  * v = 1 6 7 9 , w = 13 2 8 10 11
==> passed

Test 17: test length() and ancestor() with Iterable arguments
  * 100 random subsets of 1 and 1 vertices in digraph-wordnet.txt
    - failed on trial 20 of 100
    - v = 42071
    - w = 40808
    - student   length() = 12
    - reference length() = 11

  * 100 random subsets of 1 and 2 vertices in digraph-wordnet.txt
    - failed on trial 37 of 100
    - v = 14754
    - w = 8822 74297
    - student   length() = 11
    - reference length() = 10

  * 100 random subsets of 2 and 1 vertices in digraph-wordnet.txt
    - failed on trial 5 of 100
    - v = 6987 21487
    - w = 55955
    - student   length() = 11
    - reference length() = 10

  * 100 random subsets of 2 and 2 vertices in digraph-wordnet.txt
    - failed on trial 17 of 100
    - v = 17413 43998
    - w = 5266 8003
    - student   length() = 12
    - reference length() = 11

  * 100 random subsets of 3 and 11 vertices in digraph-wordnet.txt
    - failed on trial 14 of 100
    - v = 27305 62404 66982
    - w size = 11
    - student   length() = 8
    - reference length() = 7

  * 100 random subsets of 11 and 3 vertices in digraph-wordnet.txt
    - failed on trial 87 of 100
    - v size = 11
    - w = 5541 38472 47255
    - student   length() = 7
    - reference length() = 5

  * 100 random subsets of 0 and 5 vertices in digraph-wordnet.txt
  * 100 random subsets of 5 and 0 vertices in digraph-wordnet.txt
  * 100 random subsets of 0 and 0 vertices in digraph-wordnet.txt
==> FAILED

Test 18: Check Iterable version of length() and ancestor() with null arguments
    - called length(v, null)
    - but java.lang.NullPointerException not thrown

==> FAILED

Test 19: random calls to length() and ancestor(), with probabilities
         p1 and p2, respectively
  * random calls in a random rooted DAG (20 vertices, 100 edges)
    (p1 = 0.5, p2 = 0.5)
    - failed on call 1 to length()
    - v = 0 6 7 8 18
    - w = 0 2 4 6 16
    - student   length() = 1
    - reference length() = 0

  * random calls in a random digraph (20 vertices, 100 edges)
    (p1 = 0.5, p2 = 0.5)
    - ancestor() is not ancestor on shortest ancestral path
    - failed on call 1 to ancestor()
    - v = 2, w = 19
    - student   ancestor = 18
    - distance from 2 to 18 = 1
    - distance from 19 to 18 = 2
    - reference ancestor = 19
    - reference length   = 2

==> FAILED


Total: 1/19 tests passed!


================================================================
********************************************************************************
*  TESTING CORRECTNESS (substituting reference SAP)
********************************************************************************

Testing correctness of WordNet
*-----------------------------------------------------------
Running 14 total tests.

Test 1: test distance() of random noun pairs
  * 1000 pairs using synsets = synsets.txt; hypernyms = hypernyms.txt
==> passed

Test 2: test distance() of all noun pairs
  * synsets = synsets15.txt; hypernyms = hypernyms15Path.txt
  * synsets = synsets15.txt; hypernyms = hypernyms15Tree.txt
  * synsets = synsets6.txt; hypernyms = hypernyms6TwoAncestors.txt
  * synsets = synsets11.txt; hypernyms = hypernyms11AmbiguousAncestor.txt
  * synsets = synsets8.txt; hypernyms = hypernyms8ModTree.txt
  * synsets = synsets8.txt; hypernyms = hypernyms8WrongBFS.txt
  * synsets = synsets11.txt; hypernyms = hypernyms11ManyPathsOneAncestor.txt
  * synsets = synsets8.txt; hypernyms = hypernyms8ManyAncestors.txt
==> passed

Test 3: test distance() of random noun pairs
  * 1000 pairs using synsets = synsets100-subgraph.txt; hypernyms = hypernyms100-subgraph.txt
  * 1000 pairs using synsets = synsets500-subgraph.txt; hypernyms = hypernyms500-subgraph.txt
  * 1000 pairs using synsets = synsets1000-subgraph.txt; hypernyms = hypernyms1000-subgraph.txt
==> passed

Test 4: test sap() of random noun pairs
  * 1000 pairs using synsets = synsets.txt; hypernyms = hypernyms.txt
==> passed

Test 5: test sap() of all noun pairs
  * synsets = synsets15.txt; hypernyms = hypernyms15Path.txt
  * synsets = synsets15.txt; hypernyms = hypernyms15Tree.txt
  * synsets = synsets6.txt; hypernyms = hypernyms6TwoAncestors.txt
  * synsets = synsets11.txt; hypernyms = hypernyms11AmbiguousAncestor.txt
  * synsets = synsets8.txt; hypernyms = hypernyms8ModTree.txt
  * synsets = synsets8.txt; hypernyms = hypernyms8WrongBFS.txt
  * synsets = synsets11.txt; hypernyms = hypernyms11ManyPathsOneAncestor.txt
  * synsets = synsets8.txt; hypernyms = hypernyms8ManyAncestors.txt
==> passed

Test 6: test sap() of random noun pairs
  * 1000 pairs using synsets = synsets100-subgraph.txt; hypernyms = hypernyms100-subgraph.txt
  * 1000 pairs using synsets = synsets500-subgraph.txt; hypernyms = hypernyms500-subgraph.txt
  * 1000 pairs using synsets = synsets1000-subgraph.txt; hypernyms = hypernyms1000-subgraph.txt
==> passed

Test 7: check whether WordNet is immutable
  * synsets = synsets.txt; hypernyms = hypernyms.txt
==> passed

Test 8: check that constructor throws specified exception when the input is not a rooted DAG
  * synsets3.txt, hypernyms3InvalidTwoRoots.txt
  * synsets3.txt, hypernyms3InvalidCycle.txt
  * synsets6.txt, hypernyms6InvalidTwoRoots.txt
  * synsets6.txt, hypernyms6InvalidCycle.txt
  * synsets6.txt, hypernyms6InvalidCycle+Path.txt
==> passed

Test 9: check isNoun()
  * synsets = synsets.txt; hypernyms = hypernyms.txt
  * synsets = synsets15.txt; hypernyms = hypernyms15Path.txt
  * synsets = synsets8.txt; hypernyms = hypernyms8ModTree.txt
==> passed

Test 10: check nouns()
  * synsets = synsets.txt; hypernyms = hypernyms.txt
  * synsets = synsets15.txt; hypernyms = hypernyms15Path.txt
  * synsets = synsets8.txt; hypernyms = hypernyms8ModTree.txt
==> passed

Test 11: check whether two WordNet objects can be created at the same time
  * synsets1 = synsets15.txt; hypernyms1 = hypernyms15Tree.txt
    synsets2 = synsets15.txt; hypernyms2 = hypernyms15Path.txt
  * synsets1 = synsets.txt; hypernyms1 = hypernyms.txt
    synsets2 = synsets15.txt; hypernyms2 = hypernyms15Path.txt
==> passed

Test 12: call distance() and sca() with invalid arguments
  * synsets15.txt, hypernyms15Tree.txt, nounA = "x", nounB = "b"
  * synsets15.txt, hypernyms15Tree.txt, nounA = "b", nounB = "x"
  * synsets15.txt, hypernyms15Tree.txt, nounA = "x", nounB = "a"
  * synsets15.txt, hypernyms15Tree.txt, nounA = "x", nounB = "x"
  * synsets15.txt, hypernyms15Tree.txt, nounA = "a", nounB = null
  * synsets15.txt, hypernyms15Tree.txt, nounA = null, nounB = "a"
  * synsets15.txt, hypernyms15Tree.txt, nounA = null, nounB = null
  * synsets15.txt, hypernyms15Tree.txt, nounA = "x", nounB = null
  * synsets15.txt, hypernyms15Tree.txt, nounA = null, nounB = "x"
==> passed

Test 13: call isNoun() with a null argument
  * synsets15.txt, hypernyms15Path.txt
    - isNoun(null) fails to throw an exception
    - it should throw a java.lang.IllegalArgumentException

==> FAILED

Test 14: random calls to isNoun(), distance(), and sap(), with
         probabilities p1, p2, and p3, respectively
  * 100 random calls (p1 = 0.5, p2 = 0.5, p3 = 0.0)
  * 100 random calls (p1 = 0.5, p2 = 0.0, p3 = 0.5)
  * 100 random calls (p1 = 0.0, p2 = 0.5, p3 = 0.5)
  * 100 random calls (p1 = 0.2, p2 = 0.4, p3 = 0.4)
==> passed


Total: 13/14 tests passed!


================================================================
********************************************************************************
*  TESTING CORRECTNESS (substituting reference SAP and WordNet)
********************************************************************************

Testing correctness of Outcast
*-----------------------------------------------------------
Running 2 total tests.

Test 1: test outcast() on WordNet digraph
        (synsets.txt and hypernyms.txt)
  * outcast2.txt
  * outcast3.txt
  * outcast4.txt
  * outcast5.txt
  * outcast5a.txt
  * outcast7.txt
  * outcast8.txt
  * outcast8a.txt
  * outcast8b.txt
  * outcast8c.txt
  * outcast9.txt
  * outcast9a.txt
  * outcast10.txt
  * outcast10a.txt
  * outcast11.txt
  * outcast12.txt
  * outcast12a.txt
  * outcast17.txt
  * outcast20.txt
  * outcast29.txt
==> passed

Test 2: test outcast() on WordNet subgraph
        (synsets50000-subgraph.txt and hypernyms50000-subgraph.txt)
  * outcast2.txt
  * outcast3.txt
  * outcast5.txt
  * outcast5a.txt
  * outcast7.txt
  * outcast8.txt
  * outcast8b.txt
  * outcast8c.txt
  * outcast9.txt
  * outcast10.txt
  * outcast11.txt
==> passed


Total: 2/2 tests passed!


================================================================
********************************************************************************
*  MEMORY
********************************************************************************

Analyzing memory of SAP
*-----------------------------------------------------------
Running 1 total tests.

student     memory    = 8348008 bytes
reference   memory    = 10320496 bytes
ratio                 = 0.81
maximum allowed ratio = 2.50

vertices = 82192
edges    = 84505

Total: 1/1 tests passed!

================================================================



Analyzing memory of WordNet
*-----------------------------------------------------------
Running 3 total tests.

Test 1a: test memory of WordNet object
  * synsets = synsets1000-subgraph.txt; hypernyms = hypernyms1000-subgraph.txt
    - student   memory = 672544 bytes
    - reference memory = 1494080 bytes
    - number vertices  = 1000
    - number of edges  = 1008
    - student / reference ratio  =  0.5
    - maximum allowed rato       =  2.0

==> passed

Test 1b: test memory of WordNet object
  * synsets = synsets5000-subgraph.txt; hypernyms = hypernyms5000-subgraph.txt
    - student   memory = 3298296 bytes
    - reference memory = 7296064 bytes
    - number vertices  = 5000
    - number of edges  = 5059
    - student / reference ratio  =  0.5
    - maximum allowed rato       =  2.0

==> passed

Test 1c: test memory of WordNet object
  * synsets = synsets10000-subgraph.txt; hypernyms = hypernyms10000-subgraph.txt
    - student   memory = 7859632 bytes
    - reference memory = 16932368 bytes
    - number vertices  = 10000
    - number of edges  = 10087
    - student / reference ratio  =  0.5
    - maximum allowed rato       =  2.0

==> passed

Total: 3/3 tests passed!

================================================================



********************************************************************************
*  TIMING
********************************************************************************

Timing SAP
*-----------------------------------------------------------
Running 7 total tests.

Test 1: time SAP constructor
   *  digraph-wordnet.txt
    - student solution time =  0.00 seconds
    - maximum allowed  time =  1.00 seconds
==> passed

Test 2a-c: time length() and ancestor() with random pairs of vertices
  *  digraph-wordnet.txt
    - reference solution calls per second:  376788.00
    - student   solution calls per second:    3346.00
    - reference / student ratio:               112.61

=> passed    student <= 50000x reference
=> passed    student <=  5000x reference
=> passed    student <=   500x reference

Test 3a-c: time length() and ancestor() with random sets of 5 vertices
  *  digraph-wordnet.txt
    - reference solution calls per second:  208718.67
    - student   solution calls per second:     124.67
    - reference / student ratio:              1674.21

=> passed    student <= 20000x reference
=> passed    student <=  2000x reference
=> FAILED    student <=   200x reference


Total: 6/7 tests passed!


================================================================



********************************************************************************
*  TIMING (substituting reference SAP)
********************************************************************************

Timing WordNet
*-----------------------------------------------------------
Running 8 total tests.

Test 1: timing WordNet constructor
  * synsets = synsets.txt; hypernyms = hypernyms.txt
    - student constructor time =  0.78 seconds
    - maximum allowed     time = 10.00 seconds
==> passed

Test 2: check that exactly one SAP object created per WordNet object
==> passed

Test 3a-c: timing sap() and distance() with random nouns
  * synsets = synsets.txt; hypernyms = hypernyms.txt
    - reference solution calls per second:  214486.80
    - student   solution calls per second:  235371.00
    - reference / student ratio:                 0.91

=> passed    student <= 10000x reference
=> passed    student <=  1000x reference
=> passed    student <=   100x reference
=> passed    student <=    10x reference
=> passed    student <=     5x reference

Test 4: timing isNoun() with random nouns
  * synsets = synsets.txt; hypernyms = hypernyms.txt
    - reference solution calls per second:  632483.00
    - student   solution calls per second:  603082.00
    - reference / student ratio:                 1.05
    - allowed ratio:                             4.00
==> passed

Total: 8/8 tests passed!


================================================================



********************************************************************************
*  TIMING (substituting reference SAP and WordNet)
********************************************************************************

Timing Outcast
*-----------------------------------------------------------
Running 1 total tests.

1.14 seconds to build WordNet

Computing time to find outcasts of various outcast files.
Total time must not exceed 1 seconds.

    filename       n     time
-----------------------------
   outcast4.txt    4     0.00
   outcast5.txt    5     0.00
  outcast5a.txt    5     0.00
   outcast5.txt    5     0.00
   outcast7.txt    7     0.00
   outcast8.txt    8     0.00
  outcast8a.txt    8     0.00
  outcast8b.txt    8     0.00
  outcast8c.txt    8     0.00
   outcast9.txt    9     0.00
  outcast9a.txt    9     0.00
  outcast10.txt   10     0.00
 outcast10a.txt   10     0.00
  outcast11.txt   11     0.00
  outcast12.txt   12     0.00
 outcast12a.txt   12     0.00
  outcast20.txt   20     0.00
  outcast29.txt   29     0.00
=> passed, total elapsed time: 0.02

Total: 1/1 tests passed!


================================================================